pipeline{
	agent any
    environment {
	    registry = "http://devops.yorosis.com/"
	    registryCredential = 'nexus-yorosis'
	}

    stages {
    	stage('Checkout'){
            steps{
                script {
                    def scmVars = checkout scm
                    env.IMAGE_TAG = (scmVars.GIT_COMMIT[0..6] + '.' + env.BUILD_NUMBER)
                }
			}
        }
        
        stage("Docker Build") {
            steps {
            	script {
		        	notifyBuild("Creating docker image for ${JOB_NAME}")
		        	docker.withTool('docker') {
		                docker.withRegistry('https://devops.yorosis.com', 'nexus-id') {
				        	def image = docker.build("livetester-ui:latest")

                            if (env.BRANCH_NAME == 'develop') {
                                image.push()
                            }
		                }
		            }
	            }
            }
   	 	}
   	 	
   	 	stage ('Docker Deploy') {
   	 	    steps {
   	 	    	script {
                    if (env.BRANCH_NAME == 'develop') {
                        notifyBuild("Deploying ${JOB_NAME}")
                        docker.withTool('docker') {
                            docker.withServer('tcp://178.128.157.56:2375', '') {
                                sh "docker stop livetester-ui || true"
                                sh "docker rm \$(docker ps -a -f=name=livetester-ui -q) || true"
                                sh "docker rmi \$(docker images -a | awk '\$1 ~ /livetester-ui/ { print \$3}') || true"
                                sh "docker login -u jenkins -p '2LEpB35):9j6vHnh' https://devops.yorosis.com"
                                
                                def image = docker.image("devops.yorosis.com/livetester-ui:latest")
                                def container = image.run("--restart=always --name livetester-ui -p 8091:80")
                            }
                        }
                    }
		        }
            }
        }
    }
    
    post {
        success {
            notifyBuild("==== Build successful ====")  
        }
        
        failure {
        	notifyBuild("==== Build Failed ====")
        }
    }
}

def notifyBuild(String message) {
   	office365ConnectorSend message: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", status: message, webhookUrl: "${env.TEAMS_CHANNEL_BUILDS_CONNECTOR_365_URL}"
}

package com.yorosis.yoroflow.repository;

import java.sql.Timestamp;
import java.util.List;
import java.util.UUID;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.yorosis.yoroflow.entities.TaskboardTask;
import com.yorosis.yoroflow.models.TaskEntityVO;

public interface GridViewRepository extends JpaRepository<TaskboardTask, UUID> {

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id, "
			+ "cast(p.taskboard_id as varchar) as taskboardId, "
			+ "p.start_date as startDate, p.due_date as dueDate, p.status as status, "
			+ "p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ "cast(p.task_data as varchar) as taskData, "
			+ "p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus, "
			+ "p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn "
			+ ", p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId, "
			+ "cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId, "
			+ "cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ "cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ "cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ "u.color as color from taskboard_columns as tbc, "
			+ "taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ "ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ "tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ "tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on "
			+ "ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join "
			+ "taskboard_task_comments as ttc on "
			+ "ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ "left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag "
			+ "and ttf.tenant_id = :tenantId left join users as u on "
			+ "u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ "p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ "p.status =:status and p.start_date between :startDate and :endDate and "
			+ "(case when exists (select 1 from taskboard_task_assigned_users x where "
			+ "x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from "
			+ "taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ "exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ "(x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId))) "
			+ "else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ "tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByStatusWithStartDateFilter(@Param("taskboardId") UUID taskboardId,
			@Param("userId") UUID userId, @Param("groupIdList") List<UUID> groupIdList,
			@Param("tenantId") String tenantId, @Param("activeFlag") String activeFlag, @Param("status") String status,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id, "
			+ "cast(p.taskboard_id as varchar) as taskboardId, "
			+ "p.start_date as startDate, p.due_date as dueDate, p.status as status, "
			+ "p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ "cast(p.task_data as varchar) as taskData, "
			+ "p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus, "
			+ "p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn "
			+ ", p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId, "
			+ "cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId, "
			+ "cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ "cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ "cast(ttau.user_id as varchar) as userId from taskboard_columns as tbc, "
			+ "taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ "ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ "tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ "tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on "
			+ "ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join "
			+ "taskboard_task_comments as ttc on "
			+ "ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ "left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag "
			+ "and ttf.tenant_id = :tenantId   where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ "p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ "exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ "x.sprints_id =:sprintId and x.active_flag = :activeFlag) and p.status =:status and "
			+ "and p.start_date between :startDate and :endDate and "
			+ "(case when exists (select 1 from taskboard_task_assigned_users x where "
			+ "x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists "
			+ "(select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ "exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ "(x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ "else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ "tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, "
			+ "ttf.id order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByStatusForSprintWithStartDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("status") String status,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id, "
			+ "cast(p.taskboard_id as varchar) as taskboardId, "
			+ "p.start_date as startDate, p.due_date as dueDate, p.status as status, "
			+ "p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ "cast(p.task_data as varchar) as taskData, "
			+ "p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus, "
			+ "p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn "
			+ ", p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId, "
			+ "cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId, "
			+ "cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ "cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ "cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ "u.color as color from taskboard_columns as tbc, "
			+ "taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ "ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ "tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ "tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on "
			+ "ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join "
			+ "taskboard_task_comments as ttc on "
			+ "ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ "left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag "
			+ "and ttf.tenant_id = :tenantId left join users as u on "
			+ "u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ "p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ "p.status =:status and p.due_date between :startDate and :endDate and "
			+ "(case when exists (select 1 from taskboard_task_assigned_users x where "
			+ "x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from "
			+ "taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ "exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ "(x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId))) "
			+ "else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ "tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByStatusWithDueDateFilter(@Param("taskboardId") UUID taskboardId,
			@Param("userId") UUID userId, @Param("groupIdList") List<UUID> groupIdList,
			@Param("tenantId") String tenantId, @Param("activeFlag") String activeFlag, @Param("status") String status,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id, "
			+ "cast(p.taskboard_id as varchar) as taskboardId, "
			+ "p.start_date as startDate, p.due_date as dueDate, p.status as status, "
			+ "p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ "cast(p.task_data as varchar) as taskData, "
			+ "p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus, "
			+ "p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn "
			+ ", p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId, "
			+ "cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId, "
			+ "cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ "cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ "cast(ttau.user_id as varchar) as userId from taskboard_columns as tbc, "
			+ "taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ "ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ "tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ "tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on "
			+ "ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join "
			+ "taskboard_task_comments as ttc on "
			+ "ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ "left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag "
			+ "and ttf.tenant_id = :tenantId   where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ "p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ "exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ "x.sprints_id =:sprintId and x.active_flag = :activeFlag) and p.status =:status and "
			+ "and p.due_date between :startDate and :endDate and "
			+ "(case when exists (select 1 from taskboard_task_assigned_users x where "
			+ "x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists "
			+ "(select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ "exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ "(x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ "else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ "tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, "
			+ "ttf.id order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByStatusForSprintWithDueDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("status") String status,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id, "
			+ "cast(p.taskboard_id as varchar) as taskboardId, "
			+ "p.start_date as startDate, p.due_date as dueDate, p.status as status, "
			+ "p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ "cast(p.task_data as varchar) as taskData, "
			+ "p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus, "
			+ "p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn "
			+ ", p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId, "
			+ "cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId, "
			+ "cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ "cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ "cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ "u.color as color from taskboard_columns as tbc, "
			+ "taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ "ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ "tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ "tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on "
			+ "ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join "
			+ "taskboard_task_comments as ttc on "
			+ "ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ "left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag "
			+ "and ttf.tenant_id = :tenantId left join users as u on "
			+ "u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ "p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ "p.status =:status and p.created_on between :startDate and :endDate and "
			+ "(case when exists (select 1 from taskboard_task_assigned_users x where "
			+ "x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from "
			+ "taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ "exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ "(x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId))) "
			+ "else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ "tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByStatusWithCreatedDateFilter(@Param("taskboardId") UUID taskboardId,
			@Param("userId") UUID userId, @Param("groupIdList") List<UUID> groupIdList,
			@Param("tenantId") String tenantId, @Param("activeFlag") String activeFlag, @Param("status") String status,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id, "
			+ "cast(p.taskboard_id as varchar) as taskboardId, "
			+ "p.start_date as startDate, p.due_date as dueDate, p.status as status, "
			+ "p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ "cast(p.task_data as varchar) as taskData, "
			+ "p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus, "
			+ "p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn "
			+ ", p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId, "
			+ "cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId, "
			+ "cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ "cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ "cast(ttau.user_id as varchar) as userId from taskboard_columns as tbc, "
			+ "taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ "ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ "tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ "tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on "
			+ "ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join "
			+ "taskboard_task_comments as ttc on "
			+ "ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ "left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag "
			+ "and ttf.tenant_id = :tenantId   where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ "p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ "exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ "x.sprints_id =:sprintId and x.active_flag = :activeFlag) and p.status =:status and "
			+ "and p.created_on between :startDate and :endDate and "
			+ "(case when exists (select 1 from taskboard_task_assigned_users x where "
			+ "x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists "
			+ "(select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ "exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ "(x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ "else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ "ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ "tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, "
			+ "ttf.id order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByStatusForSprintWithCreatedDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("status") String status,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ " u.color as color from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " p.priority is null and p.created_on between :startDate and :endDate and (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByNoPriorityWithCreatedDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("startDate") Timestamp startDate,
			@Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ " u.color as color from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " p.priority is null and p.start_date between :startDate and :endDate and (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByNoPriorityWithStartDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("startDate") Timestamp startDate,
			@Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ " u.color as color from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " p.priority is null and p.due_date between :startDate and :endDate and (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByNoPriorityWithDueDateFilter(@Param("taskboardId") UUID taskboardId,
			@Param("userId") UUID userId, @Param("groupIdList") List<UUID> groupIdList,
			@Param("tenantId") String tenantId, @Param("activeFlag") String activeFlag,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ " u.color as color from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " p.priority =:priority and p.created_on between :startDate and :endDate and (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByPriorityWithCreatedDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("priority") String priority,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ " u.color as color from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " p.priority =:priority and p.start_date between :startDate and :endDate and (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByPriorityWithStartDateFilter(@Param("taskboardId") UUID taskboardId,
			@Param("userId") UUID userId, @Param("groupIdList") List<UUID> groupIdList,
			@Param("tenantId") String tenantId, @Param("activeFlag") String activeFlag,
			@Param("priority") String priority, @Param("startDate") Timestamp startDate,
			@Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ " u.color as color from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " p.priority =:priority and p.due_date between :startDate and :endDate and (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByPriorityWithDueDateFilter(@Param("taskboardId") UUID taskboardId,
			@Param("userId") UUID userId, @Param("groupIdList") List<UUID> groupIdList,
			@Param("tenantId") String tenantId, @Param("activeFlag") String activeFlag,
			@Param("priority") String priority, @Param("startDate") Timestamp startDate,
			@Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ " tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId   where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ " x.sprints_id =:sprintId and x.active_flag = :activeFlag) and p.priority is null and "
			+ " p.created_on between :startDate and :endDate and "
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, ttf.id order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByNoPriorityForSprintWithCreatedDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("startDate") Timestamp startDate,
			@Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ " tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId   where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ " x.sprints_id =:sprintId and x.active_flag = :activeFlag) and p.priority is null and "
			+ " p.start_date between :startDate and :endDate and "
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, ttf.id order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByNoPriorityForSprintWithStartDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("startDate") Timestamp startDate,
			@Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ " tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId   where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ " x.sprints_id =:sprintId and x.active_flag = :activeFlag) and p.priority is null and "
			+ " p.due_date between :startDate and :endDate and "
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, ttf.id order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByNoPriorityForSprintWithDueDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("startDate") Timestamp startDate,
			@Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ " tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId   where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ " x.sprints_id =:sprintId and x.active_flag = :activeFlag) and p.priority =:priority and p.created_on between :startDate and :endDate and "
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, ttf.id order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByPriorityForSprintWithCreatedDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("priority") String priority,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ " tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId   where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ " x.sprints_id =:sprintId and x.active_flag = :activeFlag) and p.priority =:priority and p.start_date between :startDate and :endDate and "
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, ttf.id order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByPriorityForSprintWithStartDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("priority") String priority,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ " tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId   where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ " x.sprints_id =:sprintId and x.active_flag = :activeFlag) and p.priority =:priority and p.due_date between :startDate and :endDate and "
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, ttf.id order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByPriorityForSprintWithDueDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("priority") String priority,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ " u.color as color from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " p.status in (select tc.column_name from taskboard_columns tc where tc.column_order <> (SELECT MAX(column_order) FROM "
			+ " taskboard_columns where taskboard_id=:taskboardId) and taskboard_id=:taskboardId) and p.created_on between :startDate and :endDate and "
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByAssigneeWithCreatedDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("startDate") Timestamp startDate,
			@Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ " u.color as color from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " p.status in (select tc.column_name from taskboard_columns tc where tc.column_order <> (SELECT MAX(column_order) FROM "
			+ " taskboard_columns where taskboard_id=:taskboardId) and taskboard_id=:taskboardId) and p.start_date between :startDate and :endDate and "
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByAssigneeWithStartDateFilter(@Param("taskboardId") UUID taskboardId,
			@Param("userId") UUID userId, @Param("groupIdList") List<UUID> groupIdList,
			@Param("tenantId") String tenantId, @Param("activeFlag") String activeFlag,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ "tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, "
			+ "cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName, "
			+ " u.color as color from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " p.status in (select tc.column_name from taskboard_columns tc where tc.column_order <> (SELECT MAX(column_order) FROM "
			+ " taskboard_columns where taskboard_id=:taskboardId) and taskboard_id=:taskboardId) and p.due_date between :startDate and :endDate and "
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , "
			+ "ttc.id, ttf.id, u.first_name, u.last_name, u.color order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByAssigneeWithDueDateFilter(@Param("taskboardId") UUID taskboardId,
			@Param("userId") UUID userId, @Param("groupIdList") List<UUID> groupIdList,
			@Param("tenantId") String tenantId, @Param("activeFlag") String activeFlag,
			@Param("startDate") Timestamp startDate, @Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ " tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName,u.color as color "
			+ " from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ " x.sprints_id =:sprintId and x.active_flag = :activeFlag) and "
			+ " p.status in (select tc.column_name from taskboard_columns tc where tc.column_order <> (SELECT MAX(column_order) FROM "
			+ " taskboard_columns where taskboard_id=:taskboardId) and taskboard_id=:taskboardId) and "
			+ " p.created_on between :startDate and :endDate and"
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, ttf.id, "
			+ " u.first_name, u.last_name, u.color "
			+ " order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByAssigneeForSprintWithCreatedDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("startDate") Timestamp startDate,
			@Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ " tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName,u.color as color "
			+ " from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ " x.sprints_id =:sprintId and x.active_flag = :activeFlag) and "
			+ " p.status in (select tc.column_name from taskboard_columns tc where tc.column_order <> (SELECT MAX(column_order) FROM "
			+ " taskboard_columns where taskboard_id=:taskboardId) and taskboard_id=:taskboardId) and "
			+ " p.start_date between :startDate and :endDate and"
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, ttf.id, "
			+ " u.first_name, u.last_name, u.color "
			+ " order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByAssigneeForSprintWithStartDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("startDate") Timestamp startDate,
			@Param("endDate") Timestamp endDate);

	@Query(value = "select "
			+ " tbc.column_order as columnOrder , tbc.column_name as columnName, cast(p.id as varchar) as id,"
			+ " cast(p.taskboard_id as varchar) as taskboardId,"
			+ " p.start_date as startDate, p.due_date as dueDate, p.status as status,"
			+ " p.task_name as taskName, p.task_type as taskType, cast(p.parent_task_id as varchar) as parentTaskId , "
			+ " cast(p.task_data as varchar) as taskData, "
			+ " p.task_id as taskId, p.description as description, p.sequence_no as sequenceNo, p.sub_status as subStatus,"
			+ " p.previous_status as previousStatus, p.priority as priority, p.created_by as createdBy,p.created_on as createdOn"
			+ " , p.modified_by as modifiedBy , p.modified_on as modifiedOn, cast(ttc.id as varchar) as commentId,"
			+ " cast(ttc.taskboard_task_id as varchar) as commentsTaskId, cast(ttf.id as varchar) as filesId,"
			+ "  cast(ttf.taskboard_task_id as varchar) as filesTaskId , ttl.label_name as labelName, cast(tbl.id as varchar) as labelId, tbl.label_color as labelColor, "
			+ " cast(ttl.id as varchar) as taskLabelId, cast(ttau.id as varchar) as assignedId, "
			+ " cast(ttau.user_id as varchar) as userId, u.first_name as firstName, u.last_name as lastName,u.color as color "
			+ " from taskboard_columns as tbc, "
			+ " taskboard_task as p left join taskboard_task_labels as ttl on ttl.taskboard_task_id = p.id and "
			+ " ttl.active_flag = :activeFlag and ttl.tenant_id = :tenantId left join taskboard_labels as tbl on "
			+ " tbl.taskboard_id = p.taskboard_id and tbl.id = ttl.taskboard_labels_id and tbl.active_flag = :activeFlag and "
			+ " tbl.tenant_id = :tenantId left join taskboard_task_assigned_users as ttau on"
			+ "	ttau.taskboard_task_id = p.id and ttau.active_flag = :activeFlag and ttau.tenant_id = :tenantId left join"
			+ " taskboard_task_comments as ttc on"
			+ "	ttc.taskboard_task_id = p.id and ttc.active_flag = :activeFlag and ttc.tenant_id = :tenantId "
			+ " left join taskboard_task_files as ttf on ttf.taskboard_task_id = p.id and ttf.active_flag = :activeFlag"
			+ "	and ttf.tenant_id = :tenantId left join users as u on "
			+ " u.user_id = ttau.user_id  where (p.taskboard_id=:taskboardId and p.tenant_id =:tenantId and "
			+ " p.active_flag = :activeFlag and tbc.column_name = p.status and tbc.taskboard_id = p.taskboard_id and "
			+ " exists (select 1 from taskboard_sprint_tasks x where p.id = x.taskboard_task_id and "
			+ " x.sprints_id =:sprintId and x.active_flag = :activeFlag) and "
			+ " p.status in (select tc.column_name from taskboard_columns tc where tc.column_order <> (SELECT MAX(column_order) FROM "
			+ " taskboard_columns where taskboard_id=:taskboardId) and taskboard_id=:taskboardId) and "
			+ " p.due_date between :startDate and :endDate and"
			+ " (case when exists (select 1 from taskboard_task_assigned_users x where "
			+ " x.taskboard_task_id = p.id and x.active_flag=:activeFlag) then (exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId)) or "
			+ " exists (select 1 from taskboard_task_assigned_users x where (x.taskboard_task_id = p.id and "
			+ " (x.user_id=:userId or x.group_id in :groupIdList) and x.active_flag=:activeFlag and x.tenant_id=:tenantId)))"
			+ " else exists (select 1 from taskboard_security ts where ts.taskboard_id = p.taskboard_id and "
			+ " ts.active_flag = :activeFlag and (ts.user_id = :userId or ts.group_id in :groupIdList)) end)) group by "
			+ " tbc.column_order, tbc.column_name, p.id, ttl.label_name, tbl.id, ttl.id, ttau.id , ttc.id, ttf.id, "
			+ " u.first_name, u.last_name, u.color "
			+ " order by tbc.column_order, subStatus, sequenceNo", nativeQuery = true)
	public List<TaskEntityVO> getTaskboardTaskListByAssigneeForSprintWithDueDateFilter(
			@Param("taskboardId") UUID taskboardId, @Param("sprintId") UUID sprintId, @Param("userId") UUID userId,
			@Param("groupIdList") List<UUID> groupIdList, @Param("tenantId") String tenantId,
			@Param("activeFlag") String activeFlag, @Param("startDate") Timestamp startDate,
			@Param("endDate") Timestamp endDate);

}
